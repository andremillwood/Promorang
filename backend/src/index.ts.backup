// ===========================
// Promorang API Worker (Hono)
// ===========================
import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { verify } from 'hono/jwt'
import { getCookie, setCookie } from 'hono/cookie'
import { issueSessionToken } from './utils/session'
import { ensureUser } from './utils/user'

type Env = {
  GOOGLE_CLIENT_ID: string
  GOOGLE_CLIENT_SECRET: string
  JWT_SECRET: string
  DB: D1Database
}

const app = new Hono<{ Bindings: Env; Variables: { user?: { id: string } } }>()

// âœ… DIAGNOSTIC ENDPOINT - FIRST (before any middleware)
app.get('/api/debug/env', (c) => {
  return c.json({
    db_bound: !!c.env.DB,
    available_bindings: Object.keys(c.env),
    db_type: typeof c.env.DB,
    database_name: c.env.DB ? 'accessible' : 'undefined'
  })
})

// âœ… Global CORS â€” supports cross-domain cookies
app.use(
  '*',
  cors({
    origin: ['https://promorang.co', 'https://www.promorang.co'],
    allowHeaders: ['Content-Type', 'Authorization'],
    allowMethods: ['GET', 'POST', 'OPTIONS'],
    credentials: true,
    maxAge: 86400,
  })
)

// âœ… Domain Normalization â€” redirect all www â†’ root domain
app.use('*', async (c, next) => {
  const host = c.req.header('host') || ''
  if (host === 'www.promorang.co') {
    const url = new URL(c.req.url)
    url.hostname = 'promorang.co'
    return c.redirect(url.toString(), 301)
  }
  return next()
})

// Health check
app.get('/api/health', (c) => c.text('âœ… Promorang API Active'))

// OAuth URL endpoint
app.get('/api/auth/google/url', (c) => {
  const clientId = c.env.GOOGLE_CLIENT_ID
  const redirectUri = 'https://www.promorang.co/api/auth/google/callback'
  const scope = encodeURIComponent('openid email profile')
  const authUrl =
    `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientId}` +
    `&redirect_uri=${redirectUri}&response_type=code&scope=${scope}&access_type=offline&prompt=consent`
  return c.json({ url: authUrl })
})

// âœ… OAuth callback - inline to ensure env access
app.get('/api/auth/google/callback', async (c) => {
  try {
    const code = c.req.query('code')
    if (!code) return c.text('Missing code', 400)

    const params = new URLSearchParams({
      code,
      client_id: c.env.GOOGLE_CLIENT_ID,
      client_secret: c.env.GOOGLE_CLIENT_SECRET,
      redirect_uri: 'https://www.promorang.co/api/auth/google/callback',
      grant_type: 'authorization_code'
    })

    const tokenRes = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: params.toString()
    })

    if (!tokenRes.ok) {
      const errText = await tokenRes.text()
      console.error('Token exchange failed:', errText)
      return c.text('Token exchange failed', 500)
    }

    const tokenData = await tokenRes.json()
    const { access_token } = tokenData

    const userRes = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: { Authorization: `Bearer ${access_token}` }
    })

    if (!userRes.ok) {
      return c.text('Failed to fetch user info', 500)
    }

    const googleUser = await userRes.json()
    const user = await ensureUser(c.env.DB, {
      google_id: googleUser.id,
      email: googleUser.email,
      name: googleUser.name,
      picture: googleUser.picture
    })

    const token = await issueSessionToken(c.env.JWT_SECRET, user.id)
    
    setCookie(c, 'pr_token', token, {
      httpOnly: true,
      secure: true,
      sameSite: 'None',
      domain: '.promorang.co',
      path: '/',
      maxAge: 60 * 60 * 24 * 7
    })

    console.log('âœ… User logged in:', user.email || user.id)
    
    const currentHost = new URL(c.req.url).hostname
    const baseUrl = currentHost === 'www.promorang.co' ? 'https://promorang.co' : `https://${currentHost}`
    
    return c.redirect(`${baseUrl}/auth/success?session=true`, 302)
  } catch (err: any) {
    console.error('ðŸ’¥ OAuth Callback Error:', err)
    return c.json({ error: 'Internal Error', message: err?.message || String(err) }, 500)
  }
})

// âœ… Auth middleware for protected routes
app.use('/api/economy/*', async (c, next) => {
  const token = getCookie(c, 'pr_token')
  if (!token) return next()
  try {
    const secret = c.env.JWT_SECRET
    if (!secret) return next()
    const payload = await verify(token, secret)
    if (payload && typeof payload.sub === 'string') {
      c.set('user', { id: payload.sub })
    }
  } catch (_) {
    // silently ignore invalid token
  }
  await next()
})

// âœ… Economy /me endpoint - inline to ensure env access
app.get('/api/economy/me', async (c) => {
  const user = c.get('user')
  if (!user) return c.json({ error: 'Unauthorized' }, 401)
  
  const db = c.env.DB
  const row = await db.prepare('SELECT * FROM balances WHERE user_id=?').bind(user.id).first()
  
  if (!row) {
    await db.prepare('INSERT INTO balances (user_id) VALUES (?)').bind(user.id).run()
    return c.json({ user_id: user.id, points: 0, keys: 0, gems: 0, gold: 0 })
  }
  
  return c.json(row)
})

app.get('/', (c) => c.text('âœ… Promorang API Root Active'))

export default app
